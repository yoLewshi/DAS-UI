import React, {useContext, useEffect, useRef, useState} from 'react';
import {DiffEditor, loader} from '@monaco-editor/react';
import Loader from '../../shared_components/loader';
import Panel from "../../shared_components/panel";
import { addMessage, GlobalContext } from '../../shared_components/globalContext';
import {postAPI, postForm} from '../../shared_methods/api';

import styles from "./style.module.css";
import classNames from 'classnames/bind';
import { useSearchParams } from 'react-router-dom';
let cx = classNames.bind(styles);

function EditYaml() {

    const [searchParams, setSearchParams] = useSearchParams();
    const file = searchParams.get("file");
    
    const editor = useRef(null);
    const [fileContent, setFileContent] = useState("");
    const [error, setError] = useState(null);
    const [changes, setChanges] = useState([]);
    const [loading, setLoading] = useState(true);
    const { setMessages, messagesRef } = useContext(GlobalContext);

    const editorOptions = {
        automaticLayout: true,
        minimap: {
            enabled: true,
            autohide: false
        },
        renderSideBySide: false
    };

    function loadFileContent() {
        setLoading(true);

        postAPI("/yaml-file-content/", {filepath: file}, (response) => {
            if(!response.errors) {
                setFileContent(response.content)
            }
            else {            
                setError(response.errors)
            }

            setLoading(false);
        });
    }

    function saveChanges() {
        const formData = new FormData();
        formData.append("filepath", file);
        formData.append("content", editor.current.getModifiedEditor().getValue());

        postForm('/save-yaml-file-content/', formData, (response) => {
            addMessage(messagesRef, setMessages, response.message);

            if(response.APIMeta.status === 200) {
                if(fileContent) {
                    setFileContent(response.content);
                }
            } else if(response.errors.length) {
                addMessage(messagesRef, setMessages, response.errors.join("\n"), "error");
                console.error(response.errors);
            }
        })
    }

    function updateChanges() {
        const changedLines = editor.current.getLineChanges();
        setChanges(changedLines);
    }

    useEffect(() => {
        loadFileContent(file);
    }, [file])

    useEffect(() => {
        setChanges([]);
    }, [fileContent])

    function onMount(component) {
        editor.current = component;
        component.onDidUpdateDiff(updateChanges);
    }

    function editorHeader() {
        return (
            <div className={cx("editor_header")}>
                <div className={cx("file_info")}>
                    <div>{error ?? <>Editing: <b>{file}</b></>}</div>
                    <div>{error ? <>&nbsp;</> : <>Changes made: <b>{changes.length}</b></>}</div>
                </div>
                <div>
                    <button className="btn btn-dark" type="button" onClick={saveChanges} disabled={!file || !changes.length}>Save File</button>
                </div>
            </div>
        )
    }

    const helpText = <>
        <p>
            <b>CAUTION</b> changing these files could break any loggers using them, do not edit this file unless you are sure you know what you're doing.
        </p>
        <p>
            There are backups of the file contents in the <a href="https://git.niwa.local/marine-technology/das/-/tree/main/local/niwa" target="_blank">NIWA gitlab repo</a>
        </p>
        <p>
            If you make changes here you will need to restart the logger using it to pick up those changes. Setting the logger status to off then back should work.
        </p>
    </>

    return (  
        <>
            <div className={cx(["container-fluid", "grid"])}>
                <div className="row">
                    <div className={cx(["col", "col-2", "d-none", "d-xl-block"])}>
                        <Panel showHeader={false} cssClasses={cx(["details_panel", "w-100"])}>
                            <div>
                                {helpText}
                            </div>
                        </Panel>
                    </div>
                    <div className={cx(["col", "col-12", "col-xl-8", "middle_col"])}>
                        <Panel showHeader={true} customHeader={editorHeader} cssClasses={cx(["details_panel", "w-100"])}>
                            <DiffEditor
                                className={cx(["monaco-wrapper"])}
                                language="yaml"
                                theme="vs"
                                loading={<Loader hidden={!loading}/>}
                                original={fileContent}
                                modified={fileContent}
                                options={editorOptions}
                                onMount={onMount}
                            />
                        </Panel>
                    </div>
                    <div className={cx(["col", "col-2", "d-none", "d-xl-block"])}>
                        <Panel showHeader={true} customHeader={""} cssClasses={cx(["details_panel", "w-100"])}>
                            <div>

                            </div>
                        </Panel>
                    </div>
                </div>
            </div>
        </>
    )
};

export default EditYaml;